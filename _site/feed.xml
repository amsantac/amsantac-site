<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R-Spatialist</title>
    <description>Smart solutions for geospatial data processing
</description>
    <link>http://amsantac.co/</link>
    <atom:link href="http://amsantac.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 27 Sep 2015 10:35:45 -0500</pubDate>
    <lastBuildDate>Sun, 27 Sep 2015 10:35:45 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Using R for file stacking in CLASlite</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://claslite.carnegiescience.edu/&quot;&gt;CLASlite&lt;/a&gt; is a powerful image processing software developed by the &lt;a href=&quot;https://carnegiescience.edu/&quot;&gt;Carnegie Institution for Science&lt;/a&gt; that provides functionality for calibration, pre-processing, atmospheric correction, cloud masking, Monte Carlo Spectral Mixture Analysis and classification. I describe in this post how to use the &lt;a href=&quot;http://r-project.org&quot;&gt;R language&lt;/a&gt; for creating the text files required by CLASlite for stacking imagery through batch processing. This is a simple application that shows R beginners how to make use of basic R functions such as file listing and for loops.&lt;/p&gt;

&lt;p&gt;Usually the first step for processing imagery obtained in raw format is to stack the individual layers into a single file. CLASlite allows stacking Landsat imagery using the &#39;Prepare Landsat&#39; tool which can be accessed from the Tools - Prepare Landsat menu in the CLASlite graphical user interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-09-05-stacking-R-fig-1.png&quot; alt=&quot;Prepare Landsat Tool in CLASlite&quot; title=&quot;Prepare Landsat Tool in CLASlite&quot; style=&quot;width:600px&quot;&gt;&lt;/p&gt;

&lt;p&gt;One pretty useful feature of CLASlite is that a number of processing and preprocessing tasks can be executed for several files at a time through batch processing. For example, the batched &#39;Prepare Landsat&#39; tool requires the user to enter a CSV file that lists the absolute path of the folder of each Landsat image to be processed. Each folder must contain all the (unzipped) individual files (bands), which are usually obtained from a provider such as the &lt;a href=&quot;http://www.usgs.gov&quot;&gt;USGS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CLASlite requires that the CSV file contains the character string: &quot;LANDSAT_Folder_Names&quot; in the first row, and the absolute path of the folder of each image in the following rows as can be seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-09-05-stacking-R-fig-2.png&quot; alt=&quot;Prepare Landsat template&quot; title=&quot;Prepare Landsat template&quot; style=&quot;width:400px&quot;&gt;&lt;/p&gt;

&lt;p&gt;This template can be found in the &#39;templates&#39; folder inside the directory where CLASlite is installed. We can create a small R script that help us to automate the creation of this CSV file avoiding therefore to waste time on a repetitive action such as manually copying/pasting to a text file. Let&#39;s assume that we have a set of images of a given region that have been stored separately by year, as it would be the case for a land cover change study:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-09-05-stacking-R-fig-3.png&quot; alt=&quot;Folder structure&quot; title=&quot;Folder structure&quot; style=&quot;width:800px&quot;&gt;&lt;/p&gt;

&lt;p&gt;The purpose of our R script will be to list all the folders inside each year folders which are contained in the &#39;images&#39; folder. Let&#39;s assume that we have stored images from 2000 to 2015 in our example, so let&#39;s create an integer object in R that lists the sequence of years. Let&#39;s also create a null object where we will iteratively add the list of folders for each year, and a character object to store the path to our top-level folder &#39;images&#39;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;years &amp;lt;- 2000:2014
foldersList &amp;lt;- NULL
path &amp;lt;- &quot;C:/images&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
Now we can use a &lt;code&gt;for&lt;/code&gt; loop to, first, create the absolute path to the folder of each year (&lt;code&gt;path_year&lt;/code&gt;), list the folders inside the &lt;code&gt;path_year&lt;/code&gt; folder using the &lt;code&gt;list.dirs&lt;/code&gt; function, and then add this list of folders to the &lt;code&gt;foldersList&lt;/code&gt; object. This will be done iteratively for each year in the &lt;code&gt;years&lt;/code&gt; sequence. Sounds complicated uh? Well, the actual code is quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (year in years){
  path_year &amp;lt;- paste0(path, &quot;/&quot;, year)
  foldersList &amp;lt;- c(foldersList, list.dirs(path_year, recursive = FALSE))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
Finally we can create a data frame to store the folders list giving the required name to the data column (i.e., &quot;LANDSAT_Folder_Names&quot;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foldersListDF &amp;lt;- data.frame(&quot;LANDSAT_Folder_Names&quot; = foldersList)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
Usually it is advisable to write a script as a function to facilitate its use in the future. This requires the definition of the required parameters that the function needs to be run. Only two parameters are required in this case, the path to the top-level folder and the sequence of years. Thus, our function, which I have named here as &lt;code&gt;stackImgTable4csv&lt;/code&gt;, can be defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stackImgTable4csv &amp;lt;- function(path, years){
  foldersList &amp;lt;- NULL
    for (year in years){
      path_year &amp;lt;- paste0(path, &quot;/&quot;, year)
      foldersList &amp;lt;- c(foldersList, list.dirs(path_year, recursive = FALSE))
    }
  foldersListDF &amp;lt;- data.frame(&quot;LANDSAT_Folder_Names&quot; = foldersList)
  return(foldersListDF)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
With a function defined this way, we just need to call the function and provide the arguments for each of the parameters and the name for the output object (e.g., &lt;code&gt;outDF&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;path &amp;lt;- &quot;C:/images&quot;
years &amp;lt;- 2000:2014
outDF &amp;lt;- stackImgTable4csv(path, years)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
Then we can write the ouput data frame to a CSV file that will be loaded into CLASlite. For the &lt;code&gt;write.csv&lt;/code&gt; function, we must enter the data to be written and the name of the ouput file (e.g., &quot;stack_2000_2014.csv&quot;). We also have to indicate that the row names must not be written and that the character strings must not be surrounded by double quotes in the ouput file. This is quite important for the CSV file to be read correctly by CLASlite:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;write.csv(outDF, file = &quot;stack_2000_2014.csv&quot;, row.names = FALSE, quote = FALSE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
Finally we can go back to CLASlite and use the CSV file that we just created. Open CLASlite and click &quot;Tools&quot; - &quot;Prepare Landsat&quot;. Select &quot;Batch Process&quot; and click the &quot;Load File&quot; button to browse and select the output CSV file created previously. Finally click the &quot;Stack&quot; button. As a result of the stacking process, you should find raw and thermal files in each image folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-09-05-stacking-R-fig-4.png&quot; alt=&quot;Output folder&quot; title=&quot;Ouput folder&quot; style=&quot;width:800px&quot;&gt;&lt;/p&gt;

&lt;p&gt;Hope you found this post helpful! In the next post I will explain how we can use R to automatically create the text files required by CLASlite for producing atmospherically-corrected imagery. See you then!&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;comments&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Sep 2015 06:02:52 -0500</pubDate>
        <link>http://amsantac.co/blog/en/r/claslite/stacking/landsat/2015/09/05/stacking-R.html</link>
        <guid isPermaLink="true">http://amsantac.co/blog/en/r/claslite/stacking/landsat/2015/09/05/stacking-R.html</guid>
        
        
        <category>blog</category>
        
        <category>en</category>
        
        <category>r</category>
        
        <category>claslite</category>
        
        <category>stacking</category>
        
        <category>landsat</category>
        
      </item>
    
      <item>
        <title>Web mapping with Leaflet and R</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; is a JavaScript library that has become quite popular for creating interactive maps. In this post I explain how to create a web map using Leaflet in the &lt;a href=&quot;http://r-project.org&quot;&gt;R environment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are different ways to create a map using the Leaflet JS library. One way is to include the Leaflet JS and CSS files in the head of a web page and then set up the map in the body of the html page, as shown in the &lt;a href=&quot;http://leafletjs.com/examples/quick-start.html&quot;&gt;Leaflet Quick Start Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An alternative way is to create the web map in the R environment using an R package called &lt;a href=&quot;http://leafletjs.com/&quot;&gt;leaflet&lt;/a&gt;, developed by the guys from &lt;a href=&quot;https://www.rstudio.com/&quot;&gt;RStudio&lt;/a&gt;, which allows controlling and integrating Leaflet maps in R. Here I&#39;ll show how to read a vector map in &lt;a href=&quot;https://doc.arcgis.com/en/arcgis-online/reference/shapefiles.htm&quot;&gt;shapefile&lt;/a&gt; format and create a leaflet web map customizing how the vector map is displayed. Also I will show how to add a legend, a layers control and popups for displaying attribute data. I recommend to use the &lt;a href=&quot;https://www.rstudio.com/products/rstudio/&quot;&gt;RStudio IDE&lt;/a&gt; for the purpose of this tutorial.&lt;/p&gt;

&lt;p&gt;First we need to install the leaflet package in R entering the following command line in the R console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&quot;leaflet&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
The next step is to read in R the maps we want to display in our web map. For reading a shapefile, there are a number of functions included in different R packages (see &lt;a href=&quot;https://cran.r-project.org/package=rgdal&quot;&gt;rgdal&lt;/a&gt;, &lt;a href=&quot;https://cran.r-project.org/package=maptools&quot;&gt;maptools&lt;/a&gt;, &lt;a href=&quot;https://cran.r-project.org/package=shapefiles&quot;&gt;shapefiles&lt;/a&gt;, and &lt;a href=&quot;http://gis.stackexchange.com/questions/118077/read-esri-shape-file-polygon-or-polyline-in-r-environment&quot;&gt;others&lt;/a&gt;). I&#39;m going to use the &lt;a href=&quot;https://cran.r-project.org/package=raster&quot;&gt;raster&lt;/a&gt; package, so we need to install it first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&quot;raster&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
Now let&#39;s load the two packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(raster)
 library(leaflet)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
For this example I am going to import in R a polygon shapefile enclosing the study area of one of my projects. The projection of this map is defined in geographic coordinates (latitude/longitude). Let&#39;s use the &lt;code&gt;shapefile&lt;/code&gt; function from the raster package to read the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;llanos &amp;lt;- shapefile(&quot;C:/my_dir/llanos.shp&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
In this case the file has been read in R as an &lt;a href=&quot;http://www.inside-r.org/packages/cran/sp/docs/as.data.frame.SpatialPolygonsDataFrame&quot;&gt;SpatialPolygonsDataFrame&lt;/a&gt; object called &lt;code&gt;llanos&lt;/code&gt;. Now we are going to create the leaflet map using this object for the &lt;code&gt;data&lt;/code&gt; argument in the &lt;code&gt;leaflet&lt;/code&gt; function. We can do that in just one line of code concatenating several commands with the forward pipe operator &lt;code&gt;%&amp;gt;%&lt;/code&gt;. First we create a Leaflet map widget (with the &lt;code&gt;leaflet&lt;/code&gt; command) and then add a tile layer (with &lt;code&gt;addTiles&lt;/code&gt;), the vector map as polygon (&lt;code&gt;addPolygons&lt;/code&gt;) and a legend (&lt;code&gt;addLegend&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;leaflet(data = llanos) %&amp;gt;% addTiles() %&amp;gt;% addPolygons(fill = FALSE, stroke = TRUE, color = &quot;#03F&quot;) %&amp;gt;% 
  addLegend(&quot;bottomright&quot;, colors = &quot;#03F&quot;, labels = &quot;Llanos ecoregion&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
The &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;stroke&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; arguments allow customizing whether to fill the polygon with color, whether to draw the border of the polygon, and the border color, respectively. For the &lt;code&gt;addLegend&lt;/code&gt; command, we define the position, colors and labels of the legend. If you are working in RStudio, you should see your map displayed in the &#39;Viewer&#39; tab when you hit enter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-08-11-leaflet-R-fig-1.png&quot; alt=&quot;Web map with leaflet&quot; style=&quot;width:785px&quot;&gt;&lt;/p&gt;

&lt;p&gt;Leaflet displays &lt;a href=&quot;http://www.openstreetmap.org/&quot;&gt;OpenStreetMap (OSM)&lt;/a&gt; tiles by default but you can use any map provider (e.g., &lt;a href=&quot;http://www.mapquest.com/&quot;&gt;MapQuest Open&lt;/a&gt;, &lt;a href=&quot;https://www.mapbox.com/&quot;&gt;MapBox&lt;/a&gt;, &lt;a href=&quot;http://www.microsoft.com/maps/choose-your-bing-maps-API.aspx&quot;&gt;Bing Maps&lt;/a&gt;, etc.) as long as you conform to its terms of use. You can see the help page for the &lt;code&gt;addTiles&lt;/code&gt; function in R, if needed, entering &lt;code&gt;?addTiles&lt;/code&gt; in the R console.&lt;/p&gt;

&lt;p&gt;We can display more than one map at a time with leaflet. For this example I am going to overlay another polygon feature that shows the &lt;a href=&quot;http://landsat.usgs.gov/&quot;&gt;Landsat&lt;/a&gt; scenes that cover my study area based on the &lt;a href=&quot;http://landsat.usgs.gov/tools_wrs-2_shapefile.php&quot;&gt;WRS2 descending grid&lt;/a&gt;. Let&#39;s read this second shapefile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wrs2 &amp;lt;- shapefile(&quot;C:/my_dir/wrs2_desc.shp&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
As before, we create the Leaflet map widget, add the OSM tiles and add the polygons. For adding layers controls, we need to provide the name of the group the newly created layers should belong to. For example, I will define &quot;Study area&quot; as the group for the &lt;code&gt;llanos&lt;/code&gt; layer, and the &quot;Landsat scenes&quot; group for the &lt;code&gt;wrs2&lt;/code&gt; layer. For popups, the &lt;code&gt;popup&lt;/code&gt; argument in the &lt;code&gt;addPolygons&lt;/code&gt; function is used to display attribute data from the vector map. In this case, I am using a column called &#39;PATH_ROW&#39; that indicates the path and row of the corresponding Landsat scene.&lt;/p&gt;

&lt;p&gt;For the legend, we add pairs of values for the &lt;code&gt;colors&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt; arguments for the corresponding values of the two map layers. Finally, the &lt;code&gt;addLayersControl&lt;/code&gt; function allows adding user interface controls to switch the layers on and off. We have to enter the name of the group each layer map belong to in the &lt;code&gt;overlayGroups&lt;/code&gt; argument and then we define whether we want the layers control to be collapsed or not, using the &lt;code&gt;options&lt;/code&gt; argument. The complete code snippet can be seen below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;leaflet() %&amp;gt;% addTiles() %&amp;gt;%   
  addPolygons(data = llanos, fill = FALSE, stroke = TRUE, color = &quot;#03F&quot;, group = &quot;Study area&quot;) %&amp;gt;% 
  addPolygons(data = wrs2, fill = TRUE, stroke = TRUE, color = &quot;#f93&quot;, 
              popup = paste0(&quot;Scene: &quot;, as.character(wrs2$PATH_ROW)), group = &quot;Landsat scenes&quot;) %&amp;gt;% 
  # add a legend
  addLegend(&quot;bottomright&quot;, colors = c(&quot;#03F&quot;, &quot;#f93&quot;), labels = c(&quot;Study area&quot;, &quot;Landsat scenes (path - row)&quot;)) %&amp;gt;%   
  # add layers control
  addLayersControl(
    overlayGroups = c(&quot;Study area&quot;, &quot;Landsat scenes&quot;),
    options = layersControlOptions(collapsed = FALSE)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
Finally export the map as an html page. In the &#39;Viewer&#39; tab in RStudio, click the &#39;Export&#39; button and then click &#39;Save as Web page...&#39;. Then you just need to upload your output html page to your website to make your map available online. You can see an example of a map created with leaflet in this &lt;a href=&quot;http://amsantac.github.io/cuproject/www/landsat_scenes.html&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once uploaded, you can also embed your map in another web page inserting a code snippet like the one below wherever you want to display it:&lt;/p&gt;

&lt;div font style=&quot;BACKGROUND-COLOR:#f5f5f5;line-height:0.8&quot;&gt;
&lt;xmp font style=&quot;border:1px solid;border-color:#d1d1d1;black;border-radius:3px;padding: 0em 0 0.3em 0.3em&quot;&gt;
&lt;iframe id=&quot;map_id&quot; width=700 height=500 src=&quot;http://mywebsite.com/my_map.html&quot;&gt;&lt;/iframe&gt;
&lt;/xmp&gt;
&lt;/font&gt;&lt;/div&gt;


&lt;p&gt;Now you have a fancy web map with legend, layers controls and popups:&lt;/p&gt;

&lt;iframe id=&quot;map_llanos_emb&quot; width=785 height=500 src=&quot;http://amsantac.github.io/cuproject/www/landsat_scenes.html&quot;&gt;&lt;/iframe&gt;


&lt;p&gt;&lt;br&gt;
That&#39;s it. Congratulations for finishing this first tutorial!&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;comments&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 06:02:52 -0500</pubDate>
        <link>http://amsantac.co/blog/en/r/leaflet/webmapping/2015/08/11/leaflet-R.html</link>
        <guid isPermaLink="true">http://amsantac.co/blog/en/r/leaflet/webmapping/2015/08/11/leaflet-R.html</guid>
        
        
        <category>blog</category>
        
        <category>en</category>
        
        <category>r</category>
        
        <category>leaflet</category>
        
        <category>webmapping</category>
        
      </item>
    
      <item>
        <title>Welcome to the R-Spatialist Blog!</title>
        <description>&lt;p&gt;Hi there! Welcome to my blog!&lt;/p&gt;

&lt;p&gt;I&#39;ll be posting about topics related to the application of programming languages to the processing, visualization and analysis of spatial data, especially using the &lt;a href=&quot;http://r-project.org&quot;&gt;R language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have been programming for 10+ years for performing different kind of tasks in fields such as geostatistics, optimization of spatial sampling networks and the processing of geographic and remotely-sensed data. The application of scripting languages to automate the execution of otherwise time-consuming tasks has been quite helpful for being more efficient in a number of academic and professional activities. Through this blog I want to share what I have learned so far and what I am learning these days.&lt;/p&gt;

&lt;p&gt;Feel free to comment and give (hopefully constructive!) feedback. Hope you enjoy the reading!&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;comments&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Aug 2015 04:02:52 -0500</pubDate>
        <link>http://amsantac.co/blog/en/2015/08/09/first-post.html</link>
        <guid isPermaLink="true">http://amsantac.co/blog/en/2015/08/09/first-post.html</guid>
        
        
        <category>blog</category>
        
        <category>en</category>
        
      </item>
    
  </channel>
</rss>
